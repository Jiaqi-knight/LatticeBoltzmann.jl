#+TITLE: Lattice Boltzmann Method


https://jutho.github.io/TensorOperations.jl/stable/
https://juliaarrays.github.io/StaticArrays.jl/stable/
http://abelsiqueira.github.io/blog/package-development-on-julia-10/
https://github.com/daviddelaat/Orthopolys.jl/blob/master/src/Orthopolys.jl
https://docs.julialang.org/en/v1/manual/workflow-tips/
https://www.comsol.nl/multiphysics/fluid-flow-conservation-of-momentum-mass-and-energy

** Parameter scaling
http://s467657437.online.de/wp-content/uploads/2019/08/Krueger_Edmonton_scaling.pdf

** Palabos

http://wiki.palabos.org/numerics:matlab_samples
http://wiki.palabos.org/numerics:codes

http://www.palabos.org/documentation/userguide/implemented-models.html#large-eddy-simulations

** Exmples

https://github.com/lbm-principles-practice/code/blob/master/chapter13/matlab/vortexdecay.m
https://github.com/lbm-principles-practice/code/blob/master/chapter13/matlab/equilibrium.m
https://github.com/grasingerm/lbxflow/blob/master/inc/boundary.jl

** Parallel

http://www.claudiobellei.com/2018/09/30/julia-mpi/


** New code

#+BEGIN_SRC  julia
module lbm

abstract type Quadrature end
abstract type Lattice end
abstract type CollisionModel end
struct SingleRelaxationTime <: CollisionModel
    τ::Real
end
struct TwoRelaxationTime <: CollisionModel
    τ_symmetric::Real
    τ_asymmetric::Real
end
struct MultipleRelaxationTime{N} where N <: CollisionModel
    τ::SArray{N}
end

# Regularized?

struct Simulation

end
# encode dimension and amount of quadrature nodes

density(x) = x
momentum(x) = x

function stream!(simulation)
end

function collide!(simulation)
end
function collide(f_in, f_out)
    end

function solve(problem)
end

end # module

#+END_SRC


#+BEGIN_SRC julia
struct DistributionFunction{Q <: Quadrature}
    values::Vector{Real}
end

struct Lattice{Q <: Quadrature}
    grid
    boundary_conditions
end

struct LBM
    lattice::Lattice
    collision_model::CollisionModel
end

#+END_SRC

* Testing
https://github.com/IainNZ/Pukeko.jl

* Visualization (paraview?)
https://github.com/jipolanco/WriteVTK.jl


* Results

** U_max = 0.02 D2Q9
#+BEGIN_SRC
 0.0       1.0  0.00189928
 0.0       2.0  0.00165061
 0.0       4.0  2.67048e-5
 0.0       8.0  0.000153251
 0.166667  1.0  8.2856e-5
 0.166667  2.0  2.15486e-5
 0.166667  4.0  5.44001e-6
 0.166667  8.0  1.36332e-6
 0.333333  1.0  2.67263e-6
 0.333333  2.0  8.19765e-7
 0.333333  4.0  2.15258e-7
 0.333333  8.0  5.44726e-8
 0.5       1.0  3.12512e-8
 0.5       2.0  1.45902e-8
 0.5       4.0  4.25647e-9
 0.5       8.0  1.10562e-9
 0.666667  1.0  1.91153e-10
 0.666667  2.0  1.59751e-10
 0.666667  4.0  5.66831e-11
 0.666667  8.0  1.54728e-11
 0.833333  1.0  8.10185e-10
 0.833333  2.0  1.26019e-12
 0.833333  4.0  5.91783e-13
 0.833333  8.0  1.84984e-13
 1.0       1.0  3.11175e-9
 1.0       2.0  8.6616e-15
 1.0       4.0  8.1446e-15
 1.0       8.0  1.45069e-14
#+END_SRC

#+BEGIN_SRC D2Q17
 0.0       1.0  0.00872675
 0.0       2.0  0.000199092
 0.0       4.0  0.00065449
 0.166667  1.0  3.84142e-5
 0.166667  2.0  1.0637e-5
 0.166667  4.0  2.72658e-6
 0.333333  1.0  2.49853e-6
 0.333333  2.0  1.16128e-6
 0.333333  4.0  3.34541e-7
 0.5       1.0  2.40792e-8
 0.5       2.0  2.3396e-8
 0.5       4.0  7.76049e-9
 0.666667  1.0  3.23857e-10
 0.666667  2.0  2.6933e-10
 0.666667  4.0  1.11216e-10
 0.833333  1.0  1.11997e-10
 0.833333  2.0  2.20314e-12
 0.833333  4.0  1.28601e-12
 1.0       1.0  1.54231e-9
 1.0       2.0  1.43882e-14
 1.0       4.0  1.82827e-14
#+END_SRC


* Taylor Green Vortex

julia> analyze_convergence(
    D2Q9(),
    (scale, viscosity) -> TaylorGreenVortexExample(viscosity, scale, static = false),
    1.0 / 6.0,
    4
)

│ Row │ nu       │ scale   │ u_error    │
│     │ Float64  │ Float64 │ Float64    │
├─────┼──────────┼─────────┼────────────┤
│ 1   │ 0.166667 │ 1.0     │ 2.8085e-6  │
│ 2   │ 0.166667 │ 2.0     │ 7.58507e-7 │
│ 3   │ 0.166667 │ 4.0     │ 1.92739e-7 │
│ 4   │ 0.166667 │ 8.0     │ 4.84159e-8 │
│ 5   │ 0.166667 │ 16.0    │ 1.21618e-8 │


* Poiseuille
julia> τ =10.5; q = D2Q9(); s = Example.TaylorGreenVortex.analyze_convergence(q, (scale, viscosity) -> PoiseuilleFlow(viscosity, scale, static = true), (τ - 0.5) / q.speed_of_sound_squared, 5, 1.0)
(u_max, Re, ν) = (0.1, 0.15, 3.3333333333333335)
τ = 10.5
(u_max, Re, ν) = (0.05, 0.15, 3.3333333333333335)
τ = 10.5
(u_max, Re, ν) = (0.025, 0.15, 3.3333333333333335)
τ = 10.5
(u_max, Re, ν) = (0.0125, 0.15, 3.3333333333333335)
τ = 10.5
(u_max, Re, ν) = (0.00625, 0.15, 3.3333333333333335)
τ = 10.5
(u_max, Re, ν) = (0.003125, 0.15, 3.3333333333333335)
τ = 10.5
-(log.(stats.u_error[2:end] ./ stats.u_error[1:end - 1])) ./ log.(stats.nu[2:end] ./ stats.nu[1:end - 1]) = [Inf, Inf, Inf, Inf, Inf]
6×5 DataFrame
│ Row │ nu      │ scale   │ u_error    │ delta_x │ delta_t    │
│     │ Float64 │ Float64 │ Float64    │ Float64 │ Float64    │
├─────┼─────────┼─────────┼────────────┼─────────┼────────────┤
│ 1   │ 3.33333 │ 16.0    │ 1.92132    │ 0.2     │ 0.02       │
│ 2   │ 3.33333 │ 32.0    │ 0.610817   │ 0.1     │ 0.005      │
│ 3   │ 3.33333 │ 64.0    │ 0.154544   │ 0.05    │ 0.00125    │
│ 4   │ 3.33333 │ 128.0   │ 0.0381087  │ 0.025   │ 0.0003125  │
│ 5   │ 3.33333 │ 256.0   │ 0.00910343 │ 0.0125  │ 7.8125e-5  │
│ 6   │ 3.33333 │ 512.0   │ 0.00206386 │ 0.00625 │ 1.95313e-5 │

julia> Example.TaylorGreenVortex.plot_convergence(s, 1.0 / 6.0)
